{
	"info": {
		"_postman_id": "a6216f36-20ed-4355-98be-b5d70d1fdb0c",
		"name": "sqlVerifier",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "20300544-a6216f36-20ed-4355-98be-b5d70d1fdb0c"
	},
	"item": [
		{
			"name": "reg_login",
			"item": [
				{
					"name": "login admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "967ca48a-c33b-4b77-aeb6-f62fc1927648",
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains id_token\", function () {",
									"    pm.expect(response).to.have.property(\"id_token\");",
									"    pm.collectionVariables.set(\"id_token\", response.id_token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1e51dedd-e09b-4fc9-b578-68f76448c750",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
							},
							{
								"key": "Origin",
								"value": "http://localhost:8080"
							},
							{
								"key": "Referer",
								"value": "http://localhost:8080/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{user}}\",\n    \"password\": \"{{password}}\",\n    \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{url}}/api/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user from admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18cc6b09-9b28-4497-9f50-2d749222fb83",
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response body contains login\", () => {",
									"    pm.expect(response).to.have.property(\"login\");",
									"    pm.collectionVariables.set(\"login\", response.login);",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.collectionVariables.set(\"id\", response.id);",
									"});",
									"",
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "263e3c9b-27fd-4464-b21d-a78568a7e7db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbl9hdXRvbWF0aW9uIiwiZXhwIjoxNzA3NjU0Njg3LCJhdXRoIjoiUk9MRV9BRE1JTiIsImlhdCI6MTcwNzU2ODI4N30.kCqHZGDOUhLviAjW3lqOwpU9yjK48O_UjOLR8slvlErDcwY4cICaxQ-0UAaQT974Xf5VbxihGgGZPldPeV-6iA"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-live-6e21ca0ed768.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-live-6e21ca0ed768.herokuapp.com/admin/user-management?page=1&sort=id,asc"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"\",\n    \"login\": \"Ksu{{$randomInt}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"activated\": true,\n    \"langKey\": \"en\",\n    \"authorities\": [\n        \"ROLE_USER_STUDENT\"\n    ],\n    \"createdBy\": \"\",\n    \"createdDate\": null,\n    \"lastModifiedBy\": \"\",\n    \"lastModifiedDate\": null,\n    \"password\": \"12345\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/admin/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "login user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5061bf7-df4a-460e-8325-96fddaaa2c1f",
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains id_token\", function () {",
									"    pm.expect(response).to.have.property(\"id_token\");",
									"    pm.collectionVariables.set(\"id_token\", response.id_token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "574f9156-6cf4-4a24-a219-d9753effdfdd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
							},
							{
								"key": "Origin",
								"value": "http://localhost:8080"
							},
							{
								"key": "Referer",
								"value": "http://localhost:8080/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{login}}\",\n    \"password\": \"12345\",\n    \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{url}}/api/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35986df3-9b69-4584-acd4-673cbac4d282",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1fa44339-1138-4fe2-9c70-f379ac484ea8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/admin/users/{{login}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{login}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get list of user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "234d7195-db18-4c20-870d-088f66cb98f7",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6dca83a9-d3c4-4cf7-b993-68a0d39e437d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/admin/users?page=0&size=10&sort=lastModifiedDate,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sort",
									"value": "lastModifiedDate,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72f867ed-dbaf-478f-b1e6-c92fc9df1bad",
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4f211b0b-aaac-4579-971e-cb72b97a544d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/admin/users/{{login}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{login}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19bd338c-81db-4d4c-99d1-cfe5853c05ff",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "541eea39-a105-42e6-95cf-c922c18caff7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/admin/users/{{login}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{login}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "f7b8e4ef-cc26-4315-8da3-c07fe24ab333"
		},
		{
			"name": "positive test",
			"item": [
				{
					"name": "create task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3b15fcc-1258-4185-8d8d-afaca15acf71",
								"exec": [
									"let jsonBody = pm.response.json();",
									"",
									"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
									"pm.collectionVariables.set(\"id\", jsonBody.id);",
									"",
									"pm.test(\"Response body is not empty\", function () {",
									"  const responseBody = pm.response.text();",
									"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
									"});",
									"pm.test(\"Response body is in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
									"});",
									"pm.test(\"Response headers contain the expected content type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Status code name is 'Created'\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
									"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
									"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
									"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
									"});",
									"",
									"pm.test(\"ID is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4c950550-c641-41ce-8d46-135fa2cac8e1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3a169abb-cb27-4f58-9522-3414ab50dbbf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "Cookie",
								"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
							},
							{
								"key": "Referer",
								"value": "http://localhost:8080/task?page=1&sort=id,asc"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Origin",
								"value": "http://localhost:8080"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{id_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Did you create a new task?\",\n    \"text\": \"Did you create a new task?\",\n    \"answer\": \"I created a new task\"\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/tasks",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "get tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1859f7b6-b871-4c96-a84b-0f5068ea9376",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each element in the array has an id, text, answer, and title property\", function () {",
									"    pm.response.json().forEach(function(task) {",
									"        pm.expect(task).to.have.property('id');",
									"        pm.expect(task).to.have.property('text');",
									"        pm.expect(task).to.have.property('answer');",
									"        pm.expect(task).to.have.property('title');",
									"    });",
									"});",
									"",
									"let template = `",
									"<style type=\"text/css\">",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
									"    .tftable tr {background-color:#ffffff;}",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
									"    .tftable tr:hover {background-color:#e0ffff;}",
									"</style>",
									"",
									"<table class=\"tftable\" border=\"1\">",
									"    <tr>",
									"        <th>ID</th>",
									"        <th>Title</th>",
									"        <th>Text</th>",
									"        <th>Answer</th>",
									"    </tr>",
									"    ",
									"    {{#each response}}",
									"        <tr>",
									"            <td>{{id}}</td>",
									"            <td>{{title}}</td>",
									"            <td>{{text}}</td>",
									"            <td>{{answer}}</td>",
									"        </tr>",
									"    {{/each}}",
									"</table>",
									"`;",
									"",
									"function constructVisualizerPayload() {",
									"    return {response: pm.response.json()}",
									"}",
									"",
									"pm.visualizer.set(template, constructVisualizerPayload());",
									"",
									"let jsonBody = pm.response.json();",
									"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
									"pm.collectionVariables.get(\"id\", jsonBody.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c6aae2a1-06fc-4499-b0dd-542b3e4f1997",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{id_token}}"
							}
						],
						"url": {
							"raw": "{{url}}/api/tasks?page=0&size=70",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "70"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get task_id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0fc14f84-0f11-4ad0-90a7-b6e2a6e32877",
								"exec": [
									"pm.collectionVariables.get(\"id\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "00e45320-2865-4e1c-8270-ad7af44754d8",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response is an object with id, text, answer, and title properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'text', 'answer', 'title');",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"let jsonBody = pm.response.json();",
									"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
									"pm.collectionVariables.get(\"id\", jsonBody.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5ac9d342-1da9-4f25-91e1-8b8774ac0538",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{id_token}}"
							}
						],
						"url": {
							"raw": "{{url}}/api/tasks/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update all info task_id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "db05d238-24b5-4c46-8076-48cb8f852435",
								"exec": [
									"pm.collectionVariables.get(\"id\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6e652bba-8d21-403c-8aec-7b42dfb1f4eb",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number', \"'id' field should be a number\");",
									"    pm.expect(responseData.id).to.be.at.least(0, \"'id' field should be a non-negative integer\");",
									"});",
									"",
									"pm.test(\"Validate the 'text' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.text).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"The 'answer' field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.answer).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"Validate the 'title' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"let jsonBody = pm.response.json();",
									"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
									"pm.collectionVariables.get(\"id\", jsonBody.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b699809b-1a8e-4437-b611-8ca9c2f807e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{id}},\n  \"text\": \"Do you create a new task?\",\n  \"answer\": \"I do create a new task number is {{id}}\",\n  \"title\": \"Create a new task\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/tasks/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get task after put update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "330804e0-b40a-4a43-8a6e-8e4a3ed78456",
								"exec": [
									"pm.collectionVariables.get(\"id\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ce6037fe-ddbd-441a-8cf6-0fd7c47ad082",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response is an object with id, text, answer, and title properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'text', 'answer', 'title');",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"let jsonBody = pm.response.json();",
									"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
									"pm.collectionVariables.get(\"id\", jsonBody.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "954da19a-9b3d-43d5-934e-7478c7e7f69b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
							}
						],
						"url": {
							"raw": "{{url}}/api/tasks/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update info task_id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "64ff081c-97bf-40d6-8251-482daf375037",
								"exec": [
									"pm.collectionVariables.get(\"id\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eca4bb73-0794-4311-8e35-308233f9475f",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number', \"'id' field should be a number\");",
									"    pm.expect(responseData.id).to.be.at.least(0, \"'id' field should be a non-negative integer\");",
									"});",
									"",
									"pm.test(\"Validate the 'text' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.text).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"The 'answer' field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.answer).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"Validate the 'title' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"let jsonBody = pm.response.json();",
									"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
									"pm.collectionVariables.get(\"id\", jsonBody.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c1dae04b-5e30-4a12-9d64-be2f833151b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{id}},\n  \"text\": \"Will you create one more task?\",\n  \"answer\": \"I will continue to create task number is {{id}} + 1\",\n  \"title\": \"Create a new task\"\n}"
						},
						"url": {
							"raw": "{{url}}}/api/tasks/{{id}}",
							"host": [
								"{{url}}}"
							],
							"path": [
								"api",
								"tasks",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get task after patch update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ee56e0d7-2fc3-4e66-b6a0-07b6a95ee318",
								"exec": [
									"pm.collectionVariables.get(\"id\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66b2f86e-d785-4e13-8e2b-bea592759044",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response is an object with id, text, answer, and title properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'text', 'answer', 'title');",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6c82c9b6-fd18-45c3-9eaf-35223ac8c199",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tasks/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete task_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89720d76-9b8e-4514-81c2-524ce01817fa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b5173ec6-5a38-466a-858b-324360e6fce5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tasks/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "b5efe801-9df6-42c7-aafb-284f4922a384"
		},
		{
			"name": "negative test",
			"item": [
				{
					"name": "create task with null data",
					"item": [
						{
							"name": "create task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f3dcbee-2fb2-47ea-ab20-65875c41fb10",
										"exec": [
											"let jsonBody = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"  const responseBody = pm.response.text();",
											"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
											"});",
											"pm.test(\"Response body is in JSON format\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name is Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Status code name is 'Internal Server Error'\", function () {",
											"    pm.response.to.have.status(\"Internal Server Error\");",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('type').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('status').that.is.a('number');",
											"  pm.expect(responseData).to.have.property('detail').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('instance').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('message').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('path').that.is.a('string');",
											"});",
											"",
											"pm.test(\"Status code is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.status).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "960ab35f-3be7-4310-bd59-3f347b21d3a7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
									},
									{
										"key": "Cookie",
										"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/task?page=1&sort=id,asc"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": null,\n    \"text\": \"Did you create a new task?\",\n    \"answer\": \"I created a new task\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						}
					],
					"id": "cea06f5f-6f56-43bc-b6d1-73c7526e437f"
				},
				{
					"name": "create task with empty datas",
					"item": [
						{
							"name": "create task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02399118-8795-476d-8193-d70da51a104a",
										"exec": [
											"let jsonBody = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"  const responseBody = pm.response.text();",
											"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
											"});",
											"pm.test(\"Response body is in JSON format\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
											"});",
											"pm.test(\"Response headers contain the expected content type\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name is Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
											"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
											"});",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4a84e809-cabc-45b9-b252-13def56d8cb9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
									},
									{
										"key": "Cookie",
										"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/task?page=1&sort=id,asc"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\",\n    \"text\": \"1\",\n    \"answer\": \"1\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						}
					],
					"id": "895f6d80-7cff-4ed0-8355-43c775edefe0"
				},
				{
					"name": "create task with int",
					"item": [
						{
							"name": "create task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f26cf49f-d7f0-4bdd-aab7-f87d03a8d7b4",
										"exec": [
											"let jsonBody = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"  const responseBody = pm.response.text();",
											"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
											"});",
											"pm.test(\"Response body is in JSON format\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
											"});",
											"pm.test(\"Response headers contain the expected content type\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name is Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
											"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
											"});",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a0659d17-6e5e-4dc0-9961-a01fb77d2b60",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
									},
									{
										"key": "Cookie",
										"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/task?page=1&sort=id,asc"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": 2,\n    \"text\": 5,\n    \"answer\": \"1\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						}
					],
					"id": "c31c5318-f141-46b6-a319-d406810d92c0"
				},
				{
					"name": "create task without required datas",
					"item": [
						{
							"name": "create task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74dd5320-92f5-45b6-9904-11fef4a27f5a",
										"exec": [
											"let jsonBody = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"  const responseBody = pm.response.text();",
											"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
											"});",
											"pm.test(\"Response body is in JSON format\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
											"});",
											"pm.test(\"Response headers contain the expected content type\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name is Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
											"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
											"});",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5c4a8980-a6af-4e37-913b-56db136d4b3b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
									},
									{
										"key": "Cookie",
										"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/task?page=1&sort=id,asc"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    // \"title\": 2,\n    // \"text\": 5,\n    \"answer\": \"1\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						}
					],
					"id": "1ba961b9-2cf9-441b-8b61-00d9051174c0"
				},
				{
					"name": "login admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b1a2971-fb6f-48f8-b53d-a02737002826",
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains id_token\", function () {",
									"    pm.expect(response).to.have.property(\"id_token\");",
									"    pm.collectionVariables.set(\"id_token\", response.id_token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "24c88fc3-5633-4ba9-88d6-1bfdeef8320b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
							},
							{
								"key": "Origin",
								"value": "http://localhost:8080"
							},
							{
								"key": "Referer",
								"value": "http://localhost:8080/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{user}}\",\n    \"password\": \"{{password}}\",\n    \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{url}}/api/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user from admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc419ad4-2f6c-45fa-9349-d22ef762951e",
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response body contains login\", () => {",
									"    pm.expect(response).to.have.property(\"login\");",
									"    pm.collectionVariables.set(\"login\", response.login);",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.collectionVariables.set(\"id\", response.id);",
									"});",
									"",
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3407a32c-0d75-4270-ba0d-7c5bae1139e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbl9hdXRvbWF0aW9uIiwiZXhwIjoxNzA3NjU0Njg3LCJhdXRoIjoiUk9MRV9BRE1JTiIsImlhdCI6MTcwNzU2ODI4N30.kCqHZGDOUhLviAjW3lqOwpU9yjK48O_UjOLR8slvlErDcwY4cICaxQ-0UAaQT974Xf5VbxihGgGZPldPeV-6iA"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-live-6e21ca0ed768.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-live-6e21ca0ed768.herokuapp.com/admin/user-management?page=1&sort=id,asc"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"\",\n    \"login\": \"\",\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"email\": \"\",\n    \"activated\": true,\n    \"langKey\": \"en\",\n    \"authorities\": [\n        \"ROLE_USER_STUDENT\"\n    ],\n    \"createdBy\": \"\",\n    \"createdDate\": null,\n    \"lastModifiedBy\": \"\",\n    \"lastModifiedDate\": null,\n    \"password\": \"12345\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/admin/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"id": "093bd7d1-5a8c-4d37-a9dc-1705e0984071"
		},
		{
			"name": "workflow",
			"item": [
				{
					"name": "login admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81dd38c0-717a-4fac-959a-beb01f0df59a",
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains id_token\", function () {",
									"    pm.expect(response).to.have.property(\"id_token\");",
									"    pm.collectionVariables.set(\"id_token\", response.id_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d304b44e-9a83-4cec-a25a-224182cb2832",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "x-mock-match-request-headers",
								"value": "400",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{user}}\",\n    \"password\": \"{{password}}\",\n    \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{url}}/api/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "get tasks list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1f0a123-47b0-43db-9850-a527c9eb716c",
								"exec": [
									"let currentAmountOfTasks = pm.response.json().length;",
									"console.log(\"currentAmountOfTasks\", currentAmountOfTasks);",
									"pm.collectionVariables.set(\"currentAmountOfTasks\", pm.response.json().length);",
									"",
									"let counter = 5;",
									"",
									"if(counter > currentAmountOfTasks) {",
									"    postman.setNextRequest(\"create a task\");",
									"    console.log(\"create a task\");",
									"} else {",
									"    postman.setNextRequest(\"change task text\");",
									"    console.log(\"change task text\");",
									"};",
									"",
									"pm.collectionVariables.set(\"allTaskIds\", pm.response.json().map(task => task.id));",
									"",
									"pm.collectionVariables.set(\"lastID\", pm.collectionVariables.get(\"allTaskIds\")[pm.collectionVariables.get(\"allTaskIds\").length -1]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b7951856-2bb4-4572-b4bd-f5cff6a6f183",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5d7abf42-5068-4322-bd52-e8f88483508b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}/api/tasks?page=0&size=100",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb13a181-d0fa-4da8-a497-63532ace3c69",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"eval(pm.collectionVariables.get(\"checkResponseStatusAndKey\"));",
									"console.log(pm.collectionVariables.get(\"checkResponseStatusAndKey\"));",
									"",
									"pm.test(\"Your test name\", function () {",
									"    pm.expect(jsonData.text).to.eql(\"some text\");",
									"});",
									"",
									"pm.collectionVariables.set(\"lastID\", jsonData.id);",
									"",
									"let currentAmountOfTasks = pm.collectionVariables.get(\"currentAmountOfTasks\");",
									"console.log(currentAmountOfTasks)",
									"currentAmountOfTasks++;",
									"console.log(currentAmountOfTasks)",
									"pm.collectionVariables.set(\"currentAmountOfTasks\", currentAmountOfTasks);",
									"",
									"let counter = 5;",
									"",
									"console.log(pm.collectionVariables.get(\"currentAmountOfTasks\"))",
									"if (counter > pm.collectionVariables.get(\"currentAmountOfTasks\")) {",
									"    postman.setNextRequest(\"create a task\");",
									"    console.log(\"create a task\");",
									"} else {",
									"    postman.setNextRequest(\"change task text\");",
									"    console.log(\"change task text\");",
									"};"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "33c5b106-495e-4461-8827-068ec56668d5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "32bb2ab7-bc91-463f-85db-e74a7e3e1de5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/tasks",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "change task text",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e3a25676-491f-47fc-9abc-ffdfddc73b22",
								"exec": [
									"pm.collectionVariables.get(\"lastID\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2f13bdc0-c081-4b0a-ace0-9bd80ab1c819",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b497dcf9-86ee-4777-9393-1ae391f7af16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{lastID}}\",\n  \"text\": \"some new text\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/tasks/{{lastID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get task data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5d5c321-6ee6-447d-876c-6616b80016f0",
								"exec": [
									"let arr = pm.collectionVariables.get(\"allTaskIds\");",
									"",
									"arr.forEach((taskID) => {",
									"    pm.sendRequest(",
									"        {",
									"            url: `${pm.collectionVariables.get('baseUrl')}/api/tasks/${taskID}`,",
									"            method: \"DELETE\",",
									"            header: {",
									"                \"Authorization\": \"Bearer \" + pm.collectionVariables.get('id_token'),",
									"                \"Accept\": \"*/*\"",
									"            }",
									"        },",
									"        function (err, response) {",
									"            console.log(response);",
									"        }",
									"    );",
									"});",
									"// pm.collectionVariables.unset(\"lastID\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a11dea5d-39ae-47bb-8b64-40a624387f78",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "473eaee3-8b71-414f-adec-5de4f30e1bdb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}/api/tasks/{{lastID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "06c7321b-e372-439a-8a78-e6569f19b842"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{id_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9425fcaa-9c12-40f8-9a02-c28139396fe5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7105a91e-ac1f-4826-9fa4-bf0061db7599",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "d25fed03-d8ee-47ff-adcd-a289915f115c",
			"key": "url",
			"value": "https://sqlverifier-live-6e21ca0ed768.herokuapp.com",
			"type": "string"
		},
		{
			"id": "d9b766ba-7eb9-4085-b03d-bba759e3aa7e",
			"key": "user",
			"value": "admin_automation",
			"type": "string"
		},
		{
			"id": "50777b9d-ddce-4918-af3f-6e7ca6883386",
			"key": "password",
			"value": "admin_automation",
			"type": "string"
		},
		{
			"id": "7149d751-504c-4fd5-ac31-20abebad22e9",
			"key": "id_token",
			"value": "",
			"type": "string"
		},
		{
			"id": "52f937ae-5c2c-44de-ae00-2900cead4db2",
			"key": "login",
			"value": ""
		},
		{
			"id": "36bbe2d8-0168-433c-a2b3-5daca2961bd4",
			"key": "id",
			"value": ""
		},
		{
			"id": "37c5993b-76f7-444c-afa2-be686e228f70",
			"key": "currentAmountOfTasks",
			"value": ""
		},
		{
			"id": "89df55e4-c104-4f9c-996e-c0bfdffcdee0",
			"key": "allTaskIds",
			"value": ""
		},
		{
			"id": "c1875f01-f6ed-4afd-a9fe-f4dbb823d514",
			"key": "lastID",
			"value": ""
		}
	]
}