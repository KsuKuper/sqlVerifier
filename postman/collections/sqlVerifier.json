{
	"info": {
		"_postman_id": "ab61ef82-e807-4c58-9c57-fb7987c5bd5d",
		"name": "sqlVerifier",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "20300544-ab61ef82-e807-4c58-9c57-fb7987c5bd5d"
	},
	"item": [
		{
			"name": "reg_login",
			"item": [
				{
					"name": "login admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "63cd66e9-ddfc-4e5e-897e-ab34280f3523",
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains id_token\", function () {",
									"    pm.expect(response).to.have.property(\"id_token\");",
									"    pm.collectionVariables.set(\"id_token\", response.id_token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9a1c9b89-1717-462f-942f-1ffb9238471e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
							},
							{
								"key": "Origin",
								"value": "http://localhost:8080"
							},
							{
								"key": "Referer",
								"value": "http://localhost:8080/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{user}}\",\n    \"password\": \"{{password}}\",\n    \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{url}}/api/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user from admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd4b8a2f-2944-414c-9cef-4668319d1191",
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response body contains login\", () => {",
									"    pm.expect(response).to.have.property(\"login\");",
									"    pm.collectionVariables.set(\"login\", response.login);",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.collectionVariables.set(\"id\", response.id);",
									"});",
									"",
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "da6c3bf3-f4e2-4ae8-acf5-ffd07722c100",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbl9hdXRvbWF0aW9uIiwiZXhwIjoxNzA3NjU0Njg3LCJhdXRoIjoiUk9MRV9BRE1JTiIsImlhdCI6MTcwNzU2ODI4N30.kCqHZGDOUhLviAjW3lqOwpU9yjK48O_UjOLR8slvlErDcwY4cICaxQ-0UAaQT974Xf5VbxihGgGZPldPeV-6iA"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-live-6e21ca0ed768.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-live-6e21ca0ed768.herokuapp.com/admin/user-management?page=1&sort=id,asc"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"\",\n    \"login\": \"Ksu{{$randomInt}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"activated\": true,\n    \"langKey\": \"en\",\n    \"authorities\": [\n        \"ROLE_USER_STUDENT\"\n    ],\n    \"createdBy\": \"\",\n    \"createdDate\": null,\n    \"lastModifiedBy\": \"\",\n    \"lastModifiedDate\": null,\n    \"password\": \"12345\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/admin/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "login user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be0ca711-3548-4b14-9aec-4b77d2db9b10",
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains id_token\", function () {",
									"    pm.expect(response).to.have.property(\"id_token\");",
									"    pm.collectionVariables.set(\"id_token\", response.id_token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d33f81c4-61f8-44b8-ab8c-faadd80e4d45",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
							},
							{
								"key": "Origin",
								"value": "http://localhost:8080"
							},
							{
								"key": "Referer",
								"value": "http://localhost:8080/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{login}}\",\n    \"password\": \"12345\",\n    \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{url}}/api/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c461a1c-9c61-4ae4-86b6-cacc10e3fa2f",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0072e761-0646-438a-a0eb-85c3402b7e46",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/admin/users/{{login}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{login}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get list of user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab499b02-3d29-48a2-8bff-1914f23fed3c",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5fb16ea7-e0f9-4fa7-a287-21f94d3b3bee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/admin/users?page=0&size=10&sort=lastModifiedDate,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sort",
									"value": "lastModifiedDate,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c119585a-afd5-484f-bd00-b1492f6ffd99",
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a34748e7-20ee-4dd7-9b67-6fe8d65e4cad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/admin/users/{{login}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{login}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "477776bb-08ac-4097-93ec-4ac327f7c386",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c91657d5-0d16-44c6-84f9-7e224325ff8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/admin/users/{{login}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{login}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "a52ab214-4853-422f-a845-56fd4f92ffd0"
		},
		{
			"name": "positive test",
			"item": [
				{
					"name": "create task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c433ec3c-3836-44ef-8811-81fe8d052bb0",
								"exec": [
									"let jsonBody = pm.response.json();",
									"",
									"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
									"pm.collectionVariables.set(\"id\", jsonBody.id);",
									"",
									"pm.test(\"Response body is not empty\", function () {",
									"  const responseBody = pm.response.text();",
									"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
									"});",
									"pm.test(\"Response body is in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
									"});",
									"pm.test(\"Response headers contain the expected content type\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Status code name is 'Created'\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
									"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
									"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
									"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
									"});",
									"",
									"pm.test(\"ID is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "441648a8-1343-4c8b-8a4d-81374d049ea0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e482f4d2-0711-48a3-9914-487e4126d9c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "Cookie",
								"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
							},
							{
								"key": "Referer",
								"value": "http://localhost:8080/task?page=1&sort=id,asc"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Origin",
								"value": "http://localhost:8080"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{id_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Did you create a new task?\",\n    \"text\": \"Did you create a new task?\",\n    \"answer\": \"I created a new task\"\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/tasks",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "get tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c03de5bb-1dcb-4956-b3ef-9c8349e38699",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each element in the array has an id, text, answer, and title property\", function () {",
									"    pm.response.json().forEach(function(task) {",
									"        pm.expect(task).to.have.property('id');",
									"        pm.expect(task).to.have.property('text');",
									"        pm.expect(task).to.have.property('answer');",
									"        pm.expect(task).to.have.property('title');",
									"    });",
									"});",
									"",
									"let template = `",
									"<style type=\"text/css\">",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
									"    .tftable tr {background-color:#ffffff;}",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
									"    .tftable tr:hover {background-color:#e0ffff;}",
									"</style>",
									"",
									"<table class=\"tftable\" border=\"1\">",
									"    <tr>",
									"        <th>ID</th>",
									"        <th>Title</th>",
									"        <th>Text</th>",
									"        <th>Answer</th>",
									"    </tr>",
									"    ",
									"    {{#each response}}",
									"        <tr>",
									"            <td>{{id}}</td>",
									"            <td>{{title}}</td>",
									"            <td>{{text}}</td>",
									"            <td>{{answer}}</td>",
									"        </tr>",
									"    {{/each}}",
									"</table>",
									"`;",
									"",
									"function constructVisualizerPayload() {",
									"    return {response: pm.response.json()}",
									"}",
									"",
									"pm.visualizer.set(template, constructVisualizerPayload());",
									"",
									"let jsonBody = pm.response.json();",
									"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
									"pm.collectionVariables.get(\"id\", jsonBody.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fbc031fa-7b74-4d0b-9382-0b6c1956fc76",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{id_token}}"
							}
						],
						"url": {
							"raw": "{{url}}/api/tasks?page=0&size=70",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "70"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get task_id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9a9fe4ca-382c-43ff-9b5c-fc79458e453a",
								"exec": [
									"pm.collectionVariables.get(\"id\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0ac685eb-fd52-4b65-bab1-2eb75db9c9f7",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response is an object with id, text, answer, and title properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'text', 'answer', 'title');",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"let jsonBody = pm.response.json();",
									"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
									"pm.collectionVariables.get(\"id\", jsonBody.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c9b96472-158a-4af3-8d0f-a5eda9ae52ef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{id_token}}"
							}
						],
						"url": {
							"raw": "{{url}}/api/tasks/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update all info task_id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "20b4f2ac-0f3c-4de8-9f95-0de85a378908",
								"exec": [
									"pm.collectionVariables.get(\"id\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c1e19c0e-d846-409b-8f21-171e215d58b3",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number', \"'id' field should be a number\");",
									"    pm.expect(responseData.id).to.be.at.least(0, \"'id' field should be a non-negative integer\");",
									"});",
									"",
									"pm.test(\"Validate the 'text' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.text).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"The 'answer' field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.answer).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"Validate the 'title' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"let jsonBody = pm.response.json();",
									"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
									"pm.collectionVariables.get(\"id\", jsonBody.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "43fb9945-dd2e-4ebf-8c81-2ef37bee1020",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{id}},\n  \"text\": \"Do you create a new task?\",\n  \"answer\": \"I do create a new task number is {{id}}\",\n  \"title\": \"Create a new task\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/tasks/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get task after put update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6465e07-b0c7-4040-98d3-26464028de42",
								"exec": [
									"pm.collectionVariables.get(\"id\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "990a677b-4c40-4164-8260-c2d0e729b083",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response is an object with id, text, answer, and title properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'text', 'answer', 'title');",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"let jsonBody = pm.response.json();",
									"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
									"pm.collectionVariables.get(\"id\", jsonBody.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "57e957e6-e7e3-49c0-a775-9f0c29b90b07",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
							}
						],
						"url": {
							"raw": "{{url}}/api/tasks/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update info task_id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d975ebb1-61c8-40b0-9e89-60a2d270f70e",
								"exec": [
									"pm.collectionVariables.get(\"id\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6d6fdf87-7786-4e3e-ae57-b243d75d3233",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number', \"'id' field should be a number\");",
									"    pm.expect(responseData.id).to.be.at.least(0, \"'id' field should be a non-negative integer\");",
									"});",
									"",
									"pm.test(\"Validate the 'text' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.text).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"The 'answer' field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.answer).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"Validate the 'title' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"let jsonBody = pm.response.json();",
									"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
									"pm.collectionVariables.get(\"id\", jsonBody.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "74be097b-d3b9-4767-b92e-8e693986a29b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{id}},\n  \"text\": \"Will you create one more task?\",\n  \"answer\": \"I will continue to create task number is {{id}} + 1\",\n  \"title\": \"Create a new task\"\n}"
						},
						"url": {
							"raw": "{{url}}}/api/tasks/{{id}}",
							"host": [
								"{{url}}}"
							],
							"path": [
								"api",
								"tasks",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get task after patch update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "880cd820-72bf-4f3e-a847-bb7c577bb084",
								"exec": [
									"pm.collectionVariables.get(\"id\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "67cbcfd7-0b93-42ce-b393-b0c5c93005a6",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response is an object with id, text, answer, and title properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'text', 'answer', 'title');",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "23e30fd6-bf89-452e-abff-b40597060589",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tasks/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete task_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d57dfcf4-e55c-47da-ac8d-d36cfbc83d62",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a906dbf7-6c79-43b0-b77c-bf2de17c4fdf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tasks/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "4200e738-f637-48fb-bf88-986c17509781"
		},
		{
			"name": "negative test",
			"item": [
				{
					"name": "create task with null data",
					"item": [
						{
							"name": "create task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c11ee11f-8c70-46fa-9125-e30242565ff1",
										"exec": [
											"let jsonBody = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"  const responseBody = pm.response.text();",
											"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
											"});",
											"pm.test(\"Response body is in JSON format\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name is Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Status code name is 'Internal Server Error'\", function () {",
											"    pm.response.to.have.status(\"Internal Server Error\");",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('type').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('status').that.is.a('number');",
											"  pm.expect(responseData).to.have.property('detail').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('instance').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('message').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('path').that.is.a('string');",
											"});",
											"",
											"pm.test(\"Status code is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.status).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "67635e5d-daf9-416e-9f0b-93e00c5fb7d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
									},
									{
										"key": "Cookie",
										"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/task?page=1&sort=id,asc"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": null,\n    \"text\": \"Did you create a new task?\",\n    \"answer\": \"I created a new task\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						}
					],
					"id": "260797d8-c15e-4b8b-9d2b-4cbb5f146612"
				},
				{
					"name": "create task with empty datas",
					"item": [
						{
							"name": "create task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b228614-f72c-4000-a6e3-b757a858f526",
										"exec": [
											"let jsonBody = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"  const responseBody = pm.response.text();",
											"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
											"});",
											"pm.test(\"Response body is in JSON format\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
											"});",
											"pm.test(\"Response headers contain the expected content type\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name is Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
											"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
											"});",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "65653ee8-08bf-4757-ac21-3bb96111b45c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
									},
									{
										"key": "Cookie",
										"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/task?page=1&sort=id,asc"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\",\n    \"text\": \"1\",\n    \"answer\": \"1\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						}
					],
					"id": "9cb7f19a-c1f2-4194-89bc-d50142558da3"
				},
				{
					"name": "create task with int",
					"item": [
						{
							"name": "create task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bc6cae4-51c6-473c-b771-82ef18ffa689",
										"exec": [
											"let jsonBody = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"  const responseBody = pm.response.text();",
											"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
											"});",
											"pm.test(\"Response body is in JSON format\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
											"});",
											"pm.test(\"Response headers contain the expected content type\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name is Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
											"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
											"});",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "66b7c046-d1da-40fb-9b90-9a6971553163",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
									},
									{
										"key": "Cookie",
										"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/task?page=1&sort=id,asc"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": 2,\n    \"text\": 5,\n    \"answer\": \"1\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						}
					],
					"id": "4dd3073a-17ee-44b1-8bd4-3bedd8f3ed61"
				},
				{
					"name": "create task without required datas",
					"item": [
						{
							"name": "create task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "562dc40c-1414-4a02-9ba3-b56eca156aed",
										"exec": [
											"let jsonBody = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"  const responseBody = pm.response.text();",
											"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
											"});",
											"pm.test(\"Response body is in JSON format\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
											"});",
											"pm.test(\"Response headers contain the expected content type\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name is Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
											"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
											"});",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "90ed8e70-6157-4546-9723-baeafe0e4b61",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
									},
									{
										"key": "Cookie",
										"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/task?page=1&sort=id,asc"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    // \"title\": 2,\n    // \"text\": 5,\n    \"answer\": \"1\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						}
					],
					"id": "76b70fca-68ca-47f4-bca5-1c6e0cf1dc22"
				},
				{
					"name": "login admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6d95f28-ddbe-4140-9cb4-4632850f22b7",
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains id_token\", function () {",
									"    pm.expect(response).to.have.property(\"id_token\");",
									"    pm.collectionVariables.set(\"id_token\", response.id_token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "199f624e-6d4b-4c22-8825-eed6dd64318b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
							},
							{
								"key": "Origin",
								"value": "http://localhost:8080"
							},
							{
								"key": "Referer",
								"value": "http://localhost:8080/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{user}}\",\n    \"password\": \"{{password}}\",\n    \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{url}}/api/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user from admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a445b6-a2d5-4900-9a1e-335c9c36bcb8",
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response body contains login\", () => {",
									"    pm.expect(response).to.have.property(\"login\");",
									"    pm.collectionVariables.set(\"login\", response.login);",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.collectionVariables.set(\"id\", response.id);",
									"});",
									"",
									"pm.test('Status code is 201', () => {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "18611644-f8b7-49a7-ac58-a767ac7ac50e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbl9hdXRvbWF0aW9uIiwiZXhwIjoxNzA3NjU0Njg3LCJhdXRoIjoiUk9MRV9BRE1JTiIsImlhdCI6MTcwNzU2ODI4N30.kCqHZGDOUhLviAjW3lqOwpU9yjK48O_UjOLR8slvlErDcwY4cICaxQ-0UAaQT974Xf5VbxihGgGZPldPeV-6iA"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-live-6e21ca0ed768.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-live-6e21ca0ed768.herokuapp.com/admin/user-management?page=1&sort=id,asc"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"\",\n    \"login\": \"\",\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"email\": \"\",\n    \"activated\": true,\n    \"langKey\": \"en\",\n    \"authorities\": [\n        \"ROLE_USER_STUDENT\"\n    ],\n    \"createdBy\": \"\",\n    \"createdDate\": null,\n    \"lastModifiedBy\": \"\",\n    \"lastModifiedDate\": null,\n    \"password\": \"12345\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/admin/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"id": "b055d97f-5124-4710-84f8-e1088e1419c9"
		},
		{
			"name": "workflow",
			"item": [
				{
					"name": "login admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56826fbb-086d-4642-a1c8-bff253e129da",
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains id_token\", function () {",
									"    pm.expect(response).to.have.property(\"id_token\");",
									"    pm.collectionVariables.set(\"id_token\", response.id_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "af4e4324-4702-40ec-9a46-b9c055b5007d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "x-mock-match-request-headers",
								"value": "400",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{user}}\",\n    \"password\": \"{{password}}\",\n    \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{url}}/api/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "get tasks list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e44bd0c3-d83e-4796-be31-cc7dd832cbdd",
								"exec": [
									"let currentAmountOfTasks = pm.response.json().length;",
									"console.log(\"currentAmountOfTasks\", currentAmountOfTasks);",
									"pm.collectionVariables.set(\"currentAmountOfTasks\", pm.response.json().length);",
									"",
									"let counter = 5;",
									"",
									"if(counter > currentAmountOfTasks) {",
									"    postman.setNextRequest(\"create a task\");",
									"    console.log(\"create a task\");",
									"} else {",
									"    postman.setNextRequest(\"change task text\");",
									"    console.log(\"change task text\");",
									"};",
									"",
									"pm.collectionVariables.set(\"allTaskIds\", pm.response.json().map(task => task.id));",
									"",
									"pm.collectionVariables.set(\"lastID\", pm.collectionVariables.get(\"allTaskIds\")[pm.collectionVariables.get(\"allTaskIds\").length -1]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "005e8bbb-49c2-4965-a336-bb9579b199e0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c2c1e61a-b5b9-47c6-8e31-ecfe39450398",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}/api/tasks?page=0&size=100",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f3d0dcc-536f-48a0-b264-cc2d65b0c093",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"eval(pm.collectionVariables.get(\"checkResponseStatusAndKey\"));",
									"console.log(pm.collectionVariables.get(\"checkResponseStatusAndKey\"));",
									"",
									"pm.test(\"Your test name\", function () {",
									"    pm.expect(jsonData.text).to.eql(\"some text\");",
									"});",
									"",
									"pm.collectionVariables.set(\"lastID\", jsonData.id);",
									"",
									"let currentAmountOfTasks = pm.collectionVariables.get(\"currentAmountOfTasks\");",
									"console.log(currentAmountOfTasks)",
									"currentAmountOfTasks++;",
									"console.log(currentAmountOfTasks)",
									"pm.collectionVariables.set(\"currentAmountOfTasks\", currentAmountOfTasks);",
									"",
									"let counter = 5;",
									"",
									"console.log(pm.collectionVariables.get(\"currentAmountOfTasks\"))",
									"if (counter > pm.collectionVariables.get(\"currentAmountOfTasks\")) {",
									"    postman.setNextRequest(\"create a task\");",
									"    console.log(\"create a task\");",
									"} else {",
									"    postman.setNextRequest(\"change task text\");",
									"    console.log(\"change task text\");",
									"};"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1257d997-89e9-4891-a87a-e8660e05c7da",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f7cd0d91-aa5d-48d2-abb1-257c6009b90b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/tasks",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "change task text",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "04510bad-e2a2-48da-ad71-7530ea1be6ec",
								"exec": [
									"pm.collectionVariables.get(\"lastID\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "84995345-f4f7-4f57-8e3e-6c68d90e4b22",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4271cf22-0883-4a76-bc9b-7cf45bfed0b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{lastID}}\",\n  \"text\": \"some new text\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/tasks/{{lastID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get task data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "884e9615-9473-48e5-a53a-a81eb6f29860",
								"exec": [
									"let arr = pm.collectionVariables.get(\"allTaskIds\");",
									"",
									"arr.forEach((taskID) => {",
									"    pm.sendRequest(",
									"        {",
									"            url: `${pm.collectionVariables.get('baseUrl')}/api/tasks/${taskID}`,",
									"            method: \"DELETE\",",
									"            header: {",
									"                \"Authorization\": \"Bearer \" + pm.collectionVariables.get('id_token'),",
									"                \"Accept\": \"*/*\"",
									"            }",
									"        },",
									"        function (err, response) {",
									"            console.log(response);",
									"        }",
									"    );",
									"});",
									"// pm.collectionVariables.unset(\"lastID\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b78b8374-77c9-4e7c-bcdc-1a185b6f20fc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "76dd4966-42cf-4089-8707-6303adb90ceb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{id_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{url}}/api/tasks/{{lastID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "da55e61e-f49b-4752-a5c1-530b487f24ac"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{id_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "909f1755-4bca-47bf-b1a9-83aa5982174a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "32f29ef7-cdca-458a-83c9-f86d7329fa8b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "d25fed03-d8ee-47ff-adcd-a289915f115c",
			"key": "url",
			"value": "https://sqlverifier-live-6e21ca0ed768.herokuapp.com",
			"type": "string"
		},
		{
			"id": "d9b766ba-7eb9-4085-b03d-bba759e3aa7e",
			"key": "user",
			"value": "admin_automation",
			"type": "string"
		},
		{
			"id": "50777b9d-ddce-4918-af3f-6e7ca6883386",
			"key": "password",
			"value": "admin_automation",
			"type": "string"
		},
		{
			"id": "7149d751-504c-4fd5-ac31-20abebad22e9",
			"key": "id_token",
			"value": "",
			"type": "string"
		},
		{
			"id": "52f937ae-5c2c-44de-ae00-2900cead4db2",
			"key": "login",
			"value": ""
		},
		{
			"id": "36bbe2d8-0168-433c-a2b3-5daca2961bd4",
			"key": "id",
			"value": ""
		},
		{
			"id": "37c5993b-76f7-444c-afa2-be686e228f70",
			"key": "currentAmountOfTasks",
			"value": ""
		},
		{
			"id": "89df55e4-c104-4f9c-996e-c0bfdffcdee0",
			"key": "allTaskIds",
			"value": ""
		},
		{
			"id": "c1875f01-f6ed-4afd-a9fe-f4dbb823d514",
			"key": "lastID",
			"value": ""
		}
	]
}